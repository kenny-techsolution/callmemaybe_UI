describe('CampaignSelectionService', function() {
	'use strict';

	var campaignDateServiceMock = {
		createDropDownValues : function(){return 'mockedOptions';},
		getNextMondayFromToday: function(){return 'mockedStartDate';},
		getEndDate: function(){return 'mockedEndDate';}
	};

	beforeEach(module('cip.outOfHome', function($provide) {
		$provide.value('campaignDateService', campaignDateServiceMock);
		spyOn(campaignDateServiceMock, 'createDropDownValues').andCallThrough();
		spyOn(campaignDateServiceMock, 'getNextMondayFromToday').andCallThrough();
		spyOn(campaignDateServiceMock, 'getEndDate').andCallThrough();
	}));

	describe('defaultCampaignForm', function() {
		var defaultCampaignForm;

		beforeEach(inject(function(_defaultCampaignForm_) {
			defaultCampaignForm = _defaultCampaignForm_;
		}));

		it('calls the campaignDateService.createDropDownValues function with certain values', function() {
			expect(campaignDateServiceMock.createDropDownValues).toHaveBeenCalledWith(4, 53, 4);
			expect(defaultCampaignForm.campaignLengthOptions).toBe(campaignDateServiceMock.createDropDownValues());
		});

		it('calls the campaignDateService.getNextMondayFromToday function twice, once for startDate and once for endDate', function() {
			expect(campaignDateServiceMock.getNextMondayFromToday.callCount).toBe(2);
			expect(defaultCampaignForm.startDate).toBe(campaignDateServiceMock.getNextMondayFromToday());
		});

		it('calls the campaignDateService.getEndDate function to set the endDate', function() {
			expect(campaignDateServiceMock.getEndDate).toHaveBeenCalled();
			expect(defaultCampaignForm.endDate).toBe(campaignDateServiceMock.getEndDate());
		});

		it('sets the default values for the campaign form (except for values generated by mocked functions)', function() {
			expect(defaultCampaignForm).toEqual({
				budgetName : 'Budget',
				budgetValue : '',
				campaignLengthOptions : 'mockedOptions',
				flexiableByOptions : [1, 2, 3, 4],
				numWeeks : '4',
				flexByWeeks : 1,
				startDate : 'mockedStartDate',
				endDate : 'mockedEndDate',
				flexibleBy : false,
				default4weeks : true,
				staticBulletins : true,
				digitalBulletins : true
			});
		});
	});

	describe('targetAudiences', function() {

		var targetAudiences;

		beforeEach(inject(function(_targetAudiences_) {
			targetAudiences = _targetAudiences_;
		}));

		it('sets the default values for the target audiences', function() {
			expect(targetAudiences).toEqual({
				'primary': {
					'title': 'Primary Audience',
					'canIncludeSecondary': true,
					'canReset': true,
					'included': true,
					'form': { gender : '3', age : '8', income : '6', household : '3', ageOfChild : '7', ethnicity : '7' }
				},
				'secondary': {
					'title': 'Secondary Audience',
					'canCopy': true,
					'included': false,
					'form':  { gender : '3', age : '8', income : '6', household : '3', ageOfChild : '7', ethnicity : '7' }
				}
			});
		});
	});

	describe('campaignSelection', function() {
		var campaignSelection;

		beforeEach(inject(function(_campaignSelection_) {
			campaignSelection = _campaignSelection_;
		}));

		it('has a isWithChildren function that returns true if value is "1"', function() {
			expect(campaignSelection.isWithChildren('1')).toBe(true);
			expect(campaignSelection.isWithChildren(0)).toBe(false);
		});

		it('has a demographicChanged function that returns true if any of the demographic fields has changed from the default values', function() {
			var defaultAudience = {form: {gender: '3', age: '8', income: '6', household: '3', ageOfChild: '7', ethnicity: '7'}};
			var changedAudience = {form: {gender: '4', age: '8', income: '6', household: '3', ageOfChild: '7', ethnicity: '7'}};
			expect(campaignSelection.demographicChanged(defaultAudience, 'gender', 'age', 'income', 'household', 'ageOfChild', 'ethnicity')).toBe(false);
			expect(campaignSelection.demographicChanged(changedAudience, 'gender', 'age', 'income', 'household', 'ageOfChild', 'ethnicity')).toBe(true);
		});

		it('has a campaignData function that returns all of the data for the campaign', function() {
			var expectedData = {
				location : [],
				audienceParam : { primaryAudience : { gender : '3', age : '8', income : '6', ageOfChild : '8', ethnicity : '7' }, filterSequence : []},
				campaignParam : { length : '4', startDate : 'mockedStartDate', boardType : [ '1', '2' ], budget : '' },
				vendors : [],
				groups : []
			};
			expect(campaignSelection.campaignData()).toEqual(expectedData);
			campaignSelection.cipMap.areas = [{id:'dma_123'}];
			campaignSelection.cipMap.pois = [{area:{id:'dma_123'}, radius:5, latLng: {lat: 32, lng: 90}}];
			expectedData.location = [{
				type : 'GeometryCollection',
				geometries : [{
					type : 'Circle',
					coordinates : [ 90, 32 ],
					radius : 5 * 0.017178
				}]
			}];
			expect(campaignSelection.campaignData()).toEqual(expectedData);
		});

		describe('submitCampaign', function() {
			beforeEach(inject(function($http) {
				spyOn($http, 'post').andCallThrough();
				campaignSelection.submitCampaign();
			}));

			it('does a POST', inject(function($http) {
				expect($http.post).toHaveBeenCalled();
			}));

			it('has the right arguments', inject(function($http) {
				var args = $http.post.argsForCall[0];
				var expectedData = {
					location : [],
					audienceParam : { primaryAudience : { gender : '3', age : '8', income : '6', ageOfChild : '8', ethnicity : '7' }, filterSequence : [] },
					campaignParam : { length : '4', startDate : 'mockedStartDate', boardType : [ '1', '2' ], budget : '' },
					vendors : [],
					groups : []
				};
				expect(args[0].indexOf('cip-services/ooh/plan-a-campaign')).toBeGreaterThan(-1);
				expect(args[1]).toEqual(expectedData);
			}));

			describe('on error', function() {
				ignoreSvgGets();
				beforeEach(inject(function($httpBackend) {
					$httpBackend.whenPOST(envDomainHandlerMock.getServiceDomain() + '/cip-services/ooh/plan-a-campaign/').respond(500, '');
					campaignSelection.submitCampaign();
					$httpBackend.flush();
				}));

				it('sets campaignResponseData with empty arrays', function() {
					var expectedData = {
						grossProjection: [],
						primaryProjection: [],
						secondaryProjection: []
					};
					expect(campaignSelection.campaignResponseData).toEqual(expectedData);
				});

				it('turns on the serverError message', function() {
					expect(campaignSelection.errorService.errors['serverError'].show).toBe(true);
				});
			});
		});

		describe('getAudienceRankingArray', function() {
			var ranking;
			describe('if activeOnly is true', function() {
				it('returns an empty array if no values are set', function() {
					ranking = campaignSelection.getAudienceRankingArray(true);
					expect(ranking).toEqual([]);
				});
				it('returns an ordered subset if some of the values are set', function() {
					campaignSelection.audienceParameters['targetFreq'].value = '2';
					campaignSelection.audienceParameters['targetFreq'].rank = '1st';
					campaignSelection.audienceParameters['targetReach'].value = '33';
					campaignSelection.audienceParameters['targetReach'].rank = '2nd';
					ranking = campaignSelection.getAudienceRankingArray(true);
					expect(ranking).toEqual(['targetFreq', 'targetReach']);
				});
			});

			it('always returns the 3 ranked parameters if activeOnly is false', function() {
				ranking = campaignSelection.getAudienceRankingArray();
				expect(ranking).toEqual(['targetImpr', 'targetReach', 'targetFreq']);
			});
		});

		describe('getMetricsNotMet', function(){
			var metricsNotMet;
			var data = {
				grossProjection: [
					{"reach" : 302442, "targetImp" : 650266, "freq" : 2.1},
					{"reach" : 230376, "targetImp" : 462653, "freq" : 1.7},
					{"reach" : 272200, "targetImp" : 529181, "freq" : 2.7}
				]
			}
			it('returns empty array if budget is not set', function() {
				campaignSelection.campaignDetails.budgetValue = '';
				expect(campaignSelection.getMetricsNotMet(data)).toEqual([]);
			});
			describe('when budget is set', function() {
				beforeEach(function() {
					campaignSelection.campaignDetails.budgetValue = 1000;
					campaignSelection.audienceParameters.targetImpr.value = 2000000;
					campaignSelection.audienceParameters.targetReach.value = 1000000;
					campaignSelection.audienceParameters.targetFreq.value = '>3';
				});
				it('adds the metric to the array if the projected total value is less than budget', function() {
					var expectedData = [
						{ type : 'number', label : 'Target Impressions', value : 2000000000},
						{ type : 'number', label : 'Target Reach', value : 1000000000},
						{ label : 'Target Frequency', value : '>3 time(s)'}
					];
					expect(campaignSelection.getMetricsNotMet(data)).toEqual(expectedData);
				});
			})
		});
	});
});